user www-data;
worker_processes auto;
pid /run/nginx.pid;

events {
    worker_connections 65536;
    multi_accept on;
}

http {

    # Compression
    gzip on;
    gzip_min_length 100;

    # gzip_http_version 1.0;
    gzip_vary on;
    gzip_comp_level 6;
    gzip_proxied any;
    gzip_types text/plain text/html text/css application/json application/javascript application/x-javascript text/javascript text/xml application/xml application/rss+xml application/atom+xml application/rdf+xml;

    # make sure gzip does not lose large gzipped js or css files
    # see http://blog.leetsoft.com/2007/07/25/nginx-gzip-ssl.html
    gzip_buffers 16 8k;

    # Disable gzip for certain browsers.
    gzip_disable “MSIE [1-6].(?!.*SV1)”;


    # TLS
    ssl_certificate /etc/letsencrypt/live/qdodger.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/qdodger.com/privkey.pem;

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
    ssl_ecdh_curve secp384r1;
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;
    # Disable preloading HSTS for now.  You can use the commented out header line that includes
    # the "preload" directive if you understand the implications.
    #add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";
    add_header Strict-Transport-Security "max-age=63072000; includeSubdomains";
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;

    # NOTE: run 'sudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048' on the server first
    ssl_dhparam /etc/ssl/certs/dhparam.pem;

    # TCP stuff
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 100000;
    types_hash_max_size 2048;
    # server_tokens off;

    # Buf sizes
    client_body_buffer_size      128k;
    client_max_body_size         10m;
    client_header_buffer_size    1k;
    large_client_header_buffers  4 4k;
    output_buffers               1 32k;
    postpone_output              1460;

    # Timeouts
    client_header_timeout  3m;
    client_body_timeout    3m;
    send_timeout           3m;

    # Cache
    open_file_cache max=1000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 5;
    open_file_cache_errors off;

    # server_names_hash_bucket_size 64;
    # server_name_in_redirect off;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # server {
    #     listen 80 default_server;
    #     listen [::]:80 default_server;
    #     server_name qdodger.com www.qdodger.com;
    #     return 301 https://$server_name$request_uri;
    # }

    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name qdodger.com www.qdodger.com;

        listen 443 ssl http2 default_server;
        listen [::]:443 ssl http2 default_server;

        location / {
            root /home/mark/qd/web;
        }

        location /static/ {
            root /home/mark/qdserver;
        }

        location /editor/ {
            root /home/mark/qdserver;
        }

        location /api/ {
            try_files $uri @yourapplication;
        }

        location /socket.io {
            proxy_pass http://127.0.0.1/socket.io;
            proxy_redirect off;
            proxy_buffering off;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
        }

        # location /wsapi/ {
        #     proxy_pass http://wsbackend;
        #     proxy_http_version 1.1;
        #     proxy_set_header Upgrade $http_upgrade;
        #     proxy_set_header Connection "upgrade";
        # }

        location @yourapplication {
            include uwsgi_params;
            uwsgi_pass unix:/tmp/uwsgi.sock;
        }

        # Allow access to the ACME Challenge for Let’s Encrypt
        location ~ /\.well-known\/acme-challenge/ {
            allow all;
            root /home/mark/qd/web;
        }
    }
}
